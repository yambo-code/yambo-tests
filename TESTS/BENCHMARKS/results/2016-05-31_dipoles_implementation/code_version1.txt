ORIGINAL CODE: MOD (1) [yambo]                DIPOLE_kb_sum.F
Kc=cZERO
 Kv=cZERO
 do j_spinor=1,n_spinor
   do i_spinor=1,n_spinor
     if(i_spinor/=j_spinor) cycle
     do i1=1,pp_kbv_dim
       !
       Cv(i_spinor)=V_dot_V_omp(wf_ng,WF%c(:,ivfft(i_spinor)),kbv(:,i1,1,i_spinor))
       Cc(i_spinor)=V_dot_V_omp(wf_ng,WF%c(:,icfft(i_spinor)),kbv(:,i1,1,i_spinor))
       if ( Cc(i_spinor)==cZERO .and. Cv(i_spinor)==cZERO ) cycle
       do i2=1,3
         call V_by_V_plus_V_omp(wf_ng,Cc(i_spinor),conjg(kbv(:,i1,1+i2,j_spinor)),Kc(:,i2,i_spinor,j_spinor))
         call V_by_V_plus_V_omp(wf_ng,conjg(Cv(i_spinor)),kbv(:,i1,1+i2,j_spinor),Kv(:,i2,i_spinor,j_spinor))
       enddo
     enddo
     do i1=1,3
       drho(i1)=Vstar_dot_V_omp(wf_ng,WF%c(:,ivfft(j_spinor)),Kc(:,i1,i_spinor,j_spinor))+                           V_dot_V_omp(wf_ng,WF%c(:,icff
     enddo
     rho=rho+drho
   enddo
 enddo


complex(SP) function V_dot_V_omp(N,CX,CY)        mod_wrapper_omp.F
ctmp=0.0_SP
!$omp parallel do default(shared), private(i), reduction(+:ctmp)
     do i=1,N
       ctmp=ctmp +CX(i)*CY(i)
     enddo
!$omp end parallel do
     V_dot_V_omp=ctmp

